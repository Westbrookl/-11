package com.jhc;

public class AVLTree<T extends Comparable> {
	private AVLNode<T> root = new AVLNode<T>(null);
	class AVLNode<T>{
		T data;
		AVLNode<T> parent;
		AVLNode<T> left;
		AVLNode<T> right;
		int depth;
		int balance;
		public AVLNode(T data){
			this.data = data;
			depth = 1;
			balance = 0;
			left = null;
			right = null;
			
		}
//		public AVLNode(AVLNode left,AVLNode right,T data){
//			
//		}
//		public AVLNode(AVLNode left,AVLNode right,T data,int depth){
//			
//		}
	}
	public void insert(T data){
		root = insert(data,root);
	}
	private AVLNode<T> insert(T data,AVLNode<T> root){
		if(root == null){
			return new AVLNode(data);
		}
		int result = data.compareTo(root.data);
		if(result < 0){
			root.left = insert(data,root.left);
		}else if(result > 0){
			root.right = insert(data,root.right);
		}
		/**
		 * 加入左旋右旋的东西
		 */
		root.balance = calBalance(root);
		return root;
	}
	/**
	 * 计算平衡因子的时候也需要考虑左右节点是不是为null
	 * 
	 * @param root
	 * @return
	 */
	private int calBalance(AVLNode<T> root){
		int depth1 = (root.left == null) ? 0:calDepth(root.left);
		int depth2 = (root.right == null) ? 0 : calDepth(root.right);
		return Math.abs(depth1 - depth2); 
	}
	/**
	 * 计算深度
	 * 首先计算左孩子的深度，
	 * 然后和右孩子的深度进行比较
	 * 取到最大值
	 * 直到取到最大值
	 * @param node
	 * @return
	 */
	private int calDepth(AVLNode<T> node){
		int depth = 0;
		if(node.left!=null)
			depth = node.left.depth;
		
		if(node.right!=null && node.right.depth > depth)
			depth = node.right.depth;
		depth++;
		return depth;
	}
}
