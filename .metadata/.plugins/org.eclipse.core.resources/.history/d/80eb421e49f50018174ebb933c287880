package com.jhc.二叉搜索树;

public class BinarySearchTree<T extends Comparable<T>> {
	private class Node<T>{
		public T data;
		public Node<T> left;
		public Node<T> right;
		public Node(T data1){
			this(data1,null,null);
		}
		public Node(T data,Node<T> left,Node<T> right){
			this.data = data;
			this.left = left;
			this.right = right;
		}
	}
	private Node<T> root;
	/**
	 * 没有参数默认初始化为null
	 */
	public BinarySearchTree(){
		this.root = null;
	}
	public void makeEmpty(){
		this.root = null;
	}
	public boolean isEmpty(){
		return root == null;
	}
	
	public boolean contains(T value){
		return contains(root,value);
	}
	public boolean contains(Node<T> root,T value){
		if(root == null){
			return false;
		}
		int result = value.compareTo(root.data);
		if(result < 0){
			return contains(root.left,value);
		}else if(result > 0){
			return contains(root.right,value);
		}else{
			return true;
		}		
	}
	/**
	 * 查找最小值分为两个方法一个是用来查找最小的值
	 * 一个用来查找最小的节点
	 * 查找最小的节点先判断根节点是不是为null
	 * 如果判断不为null 然后去判断是否含有左结点
	 * @return
	 */
	public T findMin(){
		return findMin(root).data;
	}
	public Node<T> findMin(Node<T> root){
		if(root == null){
			return null;
		}else if(root.left == null){
			return root;
		}
		return findMin(root.left);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
