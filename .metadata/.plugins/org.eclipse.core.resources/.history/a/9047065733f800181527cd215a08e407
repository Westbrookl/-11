package com.jhc.test2;

public class AVLTree<T extends Comparable> {
	private AVLNode<T> root = null;
	class AVLNode<T extends Comparable>{
		T data;
		AVLNode<T> parent;
		AVLNode<T> left;
		AVLNode<T> right;
		int depth;
		int balance;
		public AVLNode(T data){
			this.data = data;
			left = null;
			right = null;
			depth = 1;
			balance = 0;
			
		}
	}
	public int calDepth(AVLNode<T> node){
		int depth = 0;
		if(node.left != null){
			depth = node.left.depth;
		}
		if(node.right != null && node.right.depth > depth){
			depth = node.right.depth;
		}
		depth++;
		return depth;
	}
	public int calBalance(AVLNode<T> node){
		int leftDepth = (node.left != null)?node.left.depth:0;
		int rightDepth = (node.right != null)?node.right.depth:0;
		return leftDepth - rightDepth;
	}
	public void insert(T data){
		root = insert(data,root);
	}
	private AVLNode<T> insert(T data,AVLNode<T> node){
		if(node == null){
			return new AVLNode<T>(data);
		}
		int result = data.compareTo(node.data);
		if(result < 0){
			root.left = insert(data,root.left);
			int balance = calBalance(root.left);
			if(balance == 2 || balance == -2){
				if(balance == 2){
					 root.left = rightRotate(root.left);
				}else{
					root.left = leftRightRotate(root.left);
				}
			}
		}else if(result > 0){
			root.right = insert(data,root.right);
			int balance = calBalance(root.right);
			if(balance == 2 || balance == -2){
				if(balance == 2){
					root.right = rightLeftRotate(root.right);
				}else {
					root.right = leftRotate(root.right);
				}
			}
			
		}
		node.depth = calDepth(node);
		node.balance = calBalance(node);
		
		return node;
		
	}
	/**
	 * ÓÒÐý
	 * ÓÒ×ÓÎª¸¸
	 * ¸¸±ä×ó×Ó
	 * ÓÒËï±ä×óËï
	 * @param node
	 * @return
	 */
	private AVLNode<T> rightRotate(AVLNode<T> node){
		AVLNode<T> parent = node.parent,
				leftSon = node.left,
				rightGrandSon = leftSon.right;
		leftSon.parent = parent;
		if(parent.left == node){
			parent.left = leftSon;
		}else if(parent.right == node){
			parent.right = leftSon;
		}
		leftSon.right = node;
		node.parent = leftSon;
		
		node.left = rightGrandSon;
		if(rightGrandSon != null){		
			rightGrandSon.parent = node;
		}
		node.depth = calDepth(node);
		node.balance = calBalance(node);
		
		leftSon.depth = calDepth(leftSon);
		leftSon.balance = calBalance(leftSon);
		
		return leftSon;
	} 
	/**
	 * Ë«Ðý×ª
	 */
	private AVLNode<T> leftRightRotate(AVLNode<T> node){
		
	}

}
